# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-10-27 00:08
#
# Goes through and adds parent character to detected glyphs
#
###########################################################
from __future__ import unicode_literals

from django.db import migrations
import numpy as np

def do_stuff(apps, schemd_editor):
    Char_val = apps.get_model('calligraphy', 'Character').objects
    Pages = apps.get_model('calligraphy', 'Page').objects
    DetectedBox = apps.get_model('calligraphy', 'DetectedBox').objects
    PagesHaveChars = apps.get_model('calligraphy', 'PagesHaveChars').objects
    char = dict()
    score_card = dict()
    char_set = set()
    page_count = len(PagesHaveChars.all())
    count = 0
    for thisPage in PagesHaveChars.all():
        count += 1
        print(str(count) + " / " + str(page_count))
        curPage = Pages.get(id=thisPage.haveChars.id)
        chars_val = Char_val.filter(parent_page=curPage)
        features  = DetectedBox.filter(parent_page=curPage)
        grid_val = np.zeros([curPage.image_length,curPage.image_width], dtype=np.uint32)
        for char_val in chars_val:
            grid_val[char_val.y1:char_val.y2, char_val.x1:char_val.x2].fill(char_val.id)
            score_card[char_val.id] = 0
            char[char_val.id] = char_val
        feature_len = len(features)
        feature_count = 0
        for feature in features:
            feature_count += 1
            print("* " + str(feature_count) + " / " + str(feature_len))
            if feature.inside_currated_box:
                subgrid = grid_val[feature.y1:feature.y2, feature.x1:feature.x2]
                for char_num in np.nditer(subgrid):
                    char_nm = int(char_num)
                    if char_nm > 0:
                        if char_nm not in char_set:
                            char_set.add(char_nm)
                        score_card[char_nm] += 1
                max_score = 0
                max_char = 0
                for char_scored in char_set:
                    if max_score < score_card[char_scored]:
                        max_score = score_card[char_scored]
                        score_card[char_scored] = 0
                        max_char = char_scored
                char_set.clear()
                feature.parent_char = char[max_char]
                feature.save()
        score_card.clear()



class Migration(migrations.Migration):

    dependencies = [
        ('calligraphy', '0235_detectedbox_parent_char'),
    ]

    operations = [ migrations.RunPython(do_stuff)
    ]
