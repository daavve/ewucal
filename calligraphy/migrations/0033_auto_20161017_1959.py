# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-10-18 02:59
#
# Goes through and tries to find character multiplier values
#
#########################################################################################################
from __future__ import unicode_literals

from django.db import migrations
from PIL import Image
from PIL.ImageChops import difference
from ..models import Page, Character


class char_dat(object):
    def __init__(self, coords: [str], img: Image, char: Character):
        self.x1 = int(coords[0])
        self.y1 = int(coords[1])
        self.x2 = int(coords[2])
        self.y2 = int(coords[3])
        self.img = img
        self.char = char

class page_dat(object):
    def __init__(self, x_size: int, y_size: int, img: Image):
        self.x = x_size
        self.y = y_size
        self.img = img

def search_with_value(page: page_dat, chars: [char_dat], mult: float) -> int:
    histodiff_sum = 0
    for char in chars:
        x1 = int(mult * char.x1)
        y1 = int(mult * char.y1)
        x2 = int(mult * char.x2)
        y2 = int(mult * char.y2)
        page_char = page.img.crop([y1, x1, y2, x2])
        page_charr = page_char.resize([char.img.width, char.img.height], Image.BOX)
        page_diff = difference(page_charr, char.img).histogram()
        histo_sum = 0
        inc = 0
        for diff in page_diff:
            inc += 1
            histo_sum += diff * inc
        histodiff_sum += histo_sum
    return histodiff_sum

def set_new_coords(chars: [char_dat], mult: float) -> None:
    for char in chars:
        mchar = char.char
        mchar.x1 = int(mult * char.x1)
        mchar.y1 = int(mult * char.y1)
        mchar.x2 = int(mult * char.x2)
        mchar.y2 = int(mult * char.y2)
        mchar.save()


def perform_search(page: page_dat, chars: [char_dat], scale_max: float) -> None:
    scale_cur = scale_max / 10
    scale_inc = (scale_max - scale_cur) / 1000


    best_result = 999999999999999999999999999999999999999999999999999999999999999999999 # Aubsurdly high number
    while scale_cur <= scale_max:
        scale_cur += scale_inc
        search_results = search_with_value(page, chars, scale_cur)
        if (search_results < best_result):
            best_result = search_results
            best_scale = scale_cur
    set_new_coords(chars, best_scale)



def find_search_space(page: page_dat, chars: [char_dat]) -> None:
    max_x = float('inf')
    max_y = float('inf')
    for char in chars:
        x_factor = float(page.x) / float(char.x2)
        if (x_factor < max_x):
            max_x = x_factor
        y_factor = float(page.y) / float(char.y2)
        if (y_factor < max_y):
            max_y = y_factor
    max_scale = min(max_x, max_y)
    perform_search(page, chars, max_scale)

def correct_coords(page: Page, chars: Character) -> None:
    print(str(page.image))
    p_img = Image.open(str(page.image))
    mypage = page_dat(page.image_length, page.image_width, p_img)
    mychars = []
    for char in chars:
        coords = str(char.image).split('(')[1].split(')')[0].split(',')
        charimg = Image.open(str(char.image))
        mychars.append(char_dat(coords, charimg, char))
    find_search_space(mypage, mychars)


def fix_coordinates(apps) -> None:
    Page = apps.get_model("calligraphy", "Page")
    Char = apps.get_model("calligraphy", "Character")
    pages = Page.objects.all()
    for page in pages:
        if page.i_valid_transform is False:
            chars = Char.objects.filter(parent_page=page)
            if len(chars) > 0:
                correct_coords(page, chars)


def do_stuff(apps, schemd_editor) -> None:
    fix_coordinates(apps)

class Migration(migrations.Migration):

    dependencies = [
        ('calligraphy', '0032_auto_20161015_2129'),
    ]

    operations = [ migrations.RunPython(do_stuff)
    ]
