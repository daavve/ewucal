# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-10-01 21:06
#
# Goes through and builds boxes based on overlaps
#
#########################################################
from __future__ import unicode_literals

from django.db import migrations
import numpy as np


class Box(object):
    def __init__(self, id_num, y1, y2, x1, x2):
        self.id_num = id_num
        self.x1     = x1
        self.x2     = x2
        self.y1     = y1
        self.y2     = y2

def do_stuff(apps, schemd_editor):
    DetectedCombinedBox = apps.get_model('calligraphy', 'DetectedCombinedBox')
    Pages = apps.get_model('calligraphy', 'Page').objects.filter(has_copyright_restrictions=True)
    DetectedBox = apps.get_model('calligraphy', 'DetectedBox').objects
    for curPage in Pages:
        grid = np.zeros((curPage.image_length, curPage.image_width), dtype=np.int)
        box_dict = dict()
        for box in DetectedBox.filter(parent_page=curPage):
            if(box.predict_using_good):
                box_new = Box(box.id, box.y1, box.y2, box.x1, box.x2)
                unique = np.unique(grid[box_new.y1:box_new.y2, box_new.x1:box_new.x2])
                if len(unique) > 1 or unique[0] != 0:
                    overlaps = []
                    for unique_i in unique:
                        if unique_i not in overlaps and unique_i != 0:
                            overlaps.append(unique_i)
                    for overlap in overlaps:
                        overlap_box = box_dict[overlap]
                        box_new.y1 = min(box_new.y1, overlap_box.y1)
                        box_new.y2 = max(box_new.y2, overlap_box.y2)
                        box_new.x1 = min(box_new.x1, overlap_box.x1)
                        box_new.x2 = max(box_new.x2, overlap_box.x2)
                        del box_dict[overlap]
                grid[box_new.y1:box_new.y2, box_new.x1:box_new.x2].fill(box_new.id_num)
                box_dict[box_new.id_num] = box_new
        for box in box_dict:
            box_cur = box_dict[box]
            DetectedCombinedBox(parent_page=curPage,
                                y1=box_cur.y1,
                                y2=box_cur.y2,
                                x1=box_cur.x1,
                                x2=box_cur.x2).save()


class Migration(migrations.Migration):

    dependencies = [
        ('calligraphy', '0180_detectedcombinedbox'),
    ]

    operations = [  migrations.RunPython(do_stuff)
    ]
