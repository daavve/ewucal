# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-11-16 06:49
#
# Goes through and builds the edge lists
#
###############################################################
from __future__ import unicode_literals

from django.db import migrations


NUM_NEARBY_GLYPHS = 3

class Box(object):
    def __init__(self, parent):
        self.parent = parent
        self.y_range = set()
        for i in range(parent.y1, parent.y2):
            self.y_range.add(i)
 
class BoxIndex(object):
    def __init__(self):
        self.boxes_id = set()

def do_stuff(apps, schemd_editor):
    Pages = apps.get_model('calligraphy', 'Page').objects
    DetectedBox = apps.get_model('calligraphy', 'DetectedBox').objects
    BoxEdges = apps.get_model('calligraphy', 'BoxEdges')
    pages = Pages.filter(black_chars = False)
    page_count = len(pages)
    count = 0
    for cur_page in pages:
        print(cur_page.id)
        count += 1
        print(str(count) + " / " + str(page_count))
        boxes  = DetectedBox.filter(parent_page=cur_page)
        x_index = dict()
        box_by_id = dict()
        box_list = []
        my_x_boxes = set()
        for i in range(cur_page.image_length):
            x_index[i] = BoxIndex()
        for box in boxes:
            mybox = Box(box)
            box_list.append(mybox)
            box_by_id[box.id] = mybox
            for i in range(box.x1, box.x2):
                x_index[i].boxes_id.add(box.id)
        for box in box_list:
            cur_x = box.parent.x2
            cur_y = box.parent.y2
            edge_right = False
            edge_bottom = False
            chars_x = set()
            chars_x_ys = set()
            chars_confirmed = set()
            y_range = set()
            while len(chars_confirmed) < NUM_NEARBY_GLYPHS and not (edge_right and edge_bottom):
                if not edge_right:
                    cur_x += 1
                    if cur_x > cur_page.image_width:
                        edge_right = True
                    else:
                        if len(x_index[cur_x].boxes_id):
                            diff = x_index[cur_x].boxes_id.difference(chars_x)
                            if diff:
                                chars_x.update(diff)
                                for dif in diff:
                                    chars_x_ys.update(box_by_id[dif].y_range)
                if not edge_bottom:
                    cur_y += 1
                    if cur_y > cur_page.image_length:
                        edge_bottom = True
                    else:
                        y_range.add(cur_y)
                if chars_x_ys.intersection(y_range):
                    for char_cur in chars_x:
                        if box_by_id[char_cur].y_range.intersection(y_range):
                            chars_confirmed.add(char_cur)
            box_parent = box.parent
            distance = 0
            for boxcomp in chars_confirmed:
                distance += 1
                edge = BoxEdges(edge_from = box_parent.id,
                                edge_to = box_by_id[boxcomp].parent,
                                edge_ordinal = distance)
                edge.save()

class Migration(migrations.Migration):

    dependencies = [
        ('calligraphy', '0237_boxedges'),
    ]

    operations = [ migrations.RunPython(do_stuff)
    ]
