# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-24 03:23
#
# Stage-1 import.  Import data from c-works.json
#
#################################################################

from __future__ import unicode_literals

import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import socket, os, json


HOSTNAME = socket.gethostname()
if HOSTNAME == 'bigArch':
    IMAGE_DIR = "/home/dave/workspace/pycharm/fetch/grabbedBooks/"
else:
    IMAGE_DIR = "/media/pages/"


def read_cworks(apps) -> None:
    jsonfile = open("c-works.json", mode="r", encoding='utf-8')
    readfile = json.load(jsonfile)
    jsonfile.close()
    Author = apps.get_model("calligraphy", "Author")
    Work = apps.get_model("calligraphy", "Work")
    Page = apps.get_model("calligraphy", "Page")
    for r in readfile:
        name = r['name']
        dynesty = r['dynesty']
        if dynesty == '':
            d_author = Author(author_name=name)
        else:
            d_author = Author(author_name=name, author_dynesty=dynesty)
        d_author.save()
        for w in r['works']:
            text_block = w['text_block'].strip('\n')
            if text_block == '':
                d_work = Work(work_author=d_author)
            else:
                d_work = Work(work_author=d_author, work_transcript=text_block)
            d_work.save()
            imgprefix = str(w['pages']['book_id'])
            for p in w['pages']['pages_id']:
                fileimg = IMAGE_DIR + imgprefix + "-" + str(p)
                if not os.path.isfile(fileimg):
                    fileimg = fileimg.split('.')[0] + ".tif"
                    if not os.path.isfile(fileimg):
                        fileimg = fileimg.split('.')[0] + ".png"
                        if not os.path.isfile(fileimg):
                            raise Exception('Cannot find required image file', fileimg.split('.')[0])
                d_page = Page(parent_work=d_work, page_image=fileimg)
                d_page.save


def import_data(apps, schemd_editor):
    read_cworks(apps)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(max_length=64)),
                ('author_dynesty', models.CharField(blank=True, max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('char_mark', models.CharField(blank=True, max_length=64)),
                ('x1', models.IntegerField(blank=True)),
                ('y1', models.IntegerField(blank=True)),
                ('x2', models.IntegerField(blank=True)),
                ('y2', models.IntegerField(blank=True)),
                ('char_image', models.ImageField(blank=True, storage=django.core.files.storage.FileSystemStorage(), upload_to='')),
                ('parent_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calligraphy.Author')),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_image', models.ImageField(blank=True, storage=django.core.files.storage.FileSystemStorage(), upload_to='')),
                ('page_transcript', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_transcript', models.TextField(blank=True)),
                ('work_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calligraphy.Author')),
            ],
        ),
        migrations.AddField(
            model_name='page',
            name='parent_work',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='calligraphy.Work'),
        ),
        migrations.AddField(
            model_name='character',
            name='parent_page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calligraphy.Page'),
        ),
        migrations.RunPython(import_data)
    ]


##############################################################################################################################

# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-24 04:11
#
# Migration we really don't need.  Realized we needed extra fields, which aare in 0003 migration
#
#######################################################
from __future__ import unicode_literals
from django.db import migrations

class Migration(migrations.Migration):

    dependencies = [
        ('calligraphy', '0001_initial'),
    ]

########################################################################################################################

# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-24 04:42
#
# Migration to import character data from c-chars.json
#
###########################################################
from __future__ import unicode_literals

import json, socket, os
from django.db import migrations, models
import django.db.models.deletion

HOSTNAME = socket.gethostname()
if HOSTNAME == 'bigArch':
    PAGES_DIR = "/home/dave/workspace/pycharm/fetch/grabbedBooks/"  #Maybe, need to double-check
    CHARS_DIR = "/home/dave/workspace/pycharm/fetch/chars"
else:
    PAGES_DIR = "/media/pages/"
    CHARS_DIR = "/media/chars/"

def read_cworks(apps) -> None:
    jsonfile = open("c-chars.json", mode="r", encoding='utf-8')
    readfile = json.load(jsonfile)
    jsonfile.close()
    Author = apps.get_model("calligraphy", "Author")
    Work = apps.get_model("calligraphy", "Work")
    Page = apps.get_model("calligraphy", "Page")
    Char = apps.get_model("calligraphy", "Character")
    for r in readfile:
        mark = r['chi_mark']
        if mark == '':
            mark = None
        auth = r['chi_author']
        if auth == '':
            auth = None
        work = r['chi_work']
        if work == '':
            work = None
        wkid = r['work_id']
        pgid = r['page_id']
        cord = r['xy_coordinates']
        x1 = cord[0]
        y1 = cord[1]
        x2 = cord[2]
        y2 = cord[3]
        charfile_1 = CHARS_DIR + wkid + '/'
        charfile_2 = pgid + '(' + x1 + ',' + y1 + ',' + x2 + ',' + y2 + ').jpg'
        filename = charfile_1 + charfile_2
        if not os.path.isfile(filename):
            Exception("cannot find", filename)
        if work is not None':
            works = Work.objects.filter(author_name=auth)
            if 1 !=len(authors) :
                print(len(authors))
                print(auth)

    Exception("brake Here")


def import_data(apps, schemd_editor):
    read_cworks(apps)

class Migration(migrations.Migration):

    dependencies = [
        ('calligraphy', '0002_auto_20160223_2011'),
    ]

    operations = [
        migrations.AddField(
            model_name='character',
            name='parent_work',
            field=models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.CASCADE, to='calligraphy.Work'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='character',
            name='parent_author',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='calligraphy.Author'),
        ),
        migrations.RunPython(import_data)
    ]
