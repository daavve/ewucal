alias npm='node --max_old_space_size=8000 --mcpu=core2 /usr/bin/npm'


Interesting:

When in development mode Django serves static files in this order:

1) Any open projects
2) the file located in /usr/lib
    <It then displays a misleading message, suggesting the file is gotten from $STATIC.>


Also:

1)  I bet I can use jquery to toggle making a new box,  probably by adding a button on the side that switches the mouse from "drag stuff around mode"  "into draw a box around a new character" mode.

2)  Since the boxes do not map directly to the location, add some scroll bars to adjust the offset factors for various settings.  See if settings are consistant between documents.

2) From what I can tell, some of the coordinates we have for bounding boxes are not accurate.  We might need to implement some sort of image search functionality to extract the bounding box.

-
--AJAXY stuff with django server--

<script type="text/javascript">
    var frm = $('#FORM-ID');
    frm.submit(function () {
        $.ajax({
            type: frm.attr('method'),
            url: frm.attr('action'),
            data: frm.serialize(),
            success: function (data) {
                $("#SOME-DIV").html(data);
            },
            error: function(data) {
                $("#MESSAGE-DIV").html("Something went wrong!");
            }
        });
        return false;
    });
</script>

def save_note(request, space_name):

    """
    Saves the note content and position within the table.
    """
    place = get_object_or_404(Space, url=space_name)
    note_form = NoteForm(request.POST or None)

    if request.method == "POST" and request.is_ajax:
        msg = "The operation has been received correctly."
        print request.POST

    else:
        msg = "GET petitions are not allowed for this view."

    return HttpResponse(msg)


Many pages have no associated work.


Note:

It was not a good idea to expect the relations of the extracted data would be complete.  They are not.
I have to go back and add some relations I deleted previously.


<div class="mycarousel"> <-------------------------------| Root element
    <div> <------------------------------| List element  |
        <p>...</p> <-----| Item element  |               |
        <p>...</p> <-----| Item element  |               |
    </div> <-----------------------------|               |
</div> <-------------------------------------------------|



You can do this but you need to keep a reference to the carousel around and call reset on it. This can be achieved by using the initCallback option you pass to the jcarousel function.

function carousel_callback( carousel, state) {
    // BWA-HA...I have the carousel now....FEEL THE POWER!

    // reset empties it out
    $('#reset-caro').click( function( evt ) {
        carousel.reset();
    });

    // here's how to call add
    $('#add-to').click( function( evt ) {
        // ..this just adds to the first spot..modify as needed
        carousel.add(0, "<li>O HAI!</li>");
    });
}

$(document).ready(function() {
    $('#mycarousel').jcarousel( {
        initCallback: carousel_callback
    });
});
